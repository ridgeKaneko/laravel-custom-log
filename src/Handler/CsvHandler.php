<?php


namespace CustomLog\Handler;


use Monolog\DateTimeImmutable;
use Monolog\Handler\RotatingFileHandler;
use Monolog\Logger;

class CsvHandler extends RotatingFileHandler
{
    /**
     * @var array [ヘッダ名 -> レコードキー]
     */
    private $record_map;

    /**
     * @var bool ヘッダー書き込み済みフラグ
     */
    private $headerd = false;

    public function __construct(string $filename,array $record_map, int $maxFiles = 0, $level = Logger::DEBUG, bool $bubble = true, int $filePermission = null, bool $useLocking = false)
    {
        parent::__construct($filename, $maxFiles, $level, $bubble, $filePermission, $useLocking);

        $this->record_map = $record_map;
    }

    public function handle(array $record): bool
    {
        //初回書き込み時
        if (!$this->headerd && !file_exists($this->url))
        {
            //ヘッダー書き込み
            $this->writeHead();
        }

        return parent::handle($record); // TODO: Change the autogenerated stub
    }

    protected function rotate(): void
    {
        parent::rotate();

        $this->writeHead();
    }

    /**
     * ヘッダ行書き込み
     */
    private function writeHead()
    {
        $record = [
            'datetime' => new DateTimeImmutable(true),
            'context' => [],
            'extra' => []
        ];

        $record = array_merge($record,array_flip($this->record_map));
        $record['formatted'] = $this->getFormatter()->format($record);

        $this->write($record);

        $this->headerd = true;
    }
}
